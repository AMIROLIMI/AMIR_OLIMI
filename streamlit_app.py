import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score

WINDOW = 14         
UNITS  = 32         

st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞", layout="wide")
st.title("üìâ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç—ã—Ö —Å–ª–∏—Ç–∫–æ–≤ (LSTM)")

@st.cache_resource
def load_scaler():
    return joblib.load("scaler.pkl")

@st.cache_resource
def load_model():
    m = Sequential([LSTM(UNITS, input_shape=(WINDOW, 1)), Dense(1)])
    m.load_weights("lstm_model.keras")
    return m

def create_dataset(arr, window=WINDOW):
    X, y = [], []
    for i in range(len(arr) - window):
        X.append(arr[i:i + window])
        y.append(arr[i + window])
    return np.array(X), np.array(y)

def calc_metrics(y_true, y_pred):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mape = mean_absolute_percentage_error(y_true, y_pred)
    r2   = r2_score(y_true, y_pred)
    return rmse, mape, r2

def plot_pred(y_true, y_pred):
    fig, ax = plt.subplots(figsize=(12, 5))
    ax.plot(y_true, label="–ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", linewidth=2)
    ax.plot(y_pred, label="–ü—Ä–æ–≥–Ω–æ–∑ (LSTM)", linestyle="--")
    ax.set_title("–ü—Ä–æ–≥–Ω–æ–∑ LSTM vs –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    ax.set_xlabel("–î–Ω–∏")
    ax.set_ylabel("–¶–µ–Ω–∞")
    ax.legend()
    ax.grid(True)
    return fig

scaler = load_scaler()
model  = load_model()

file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ date,price", type=["csv", "xlsx"])

if file:
    df = pd.read_excel(file) if file.name.endswith("xlsx") else pd.read_csv(file)
    if df.shape[1] != 2:
        st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞: date, price")
        st.stop()

    df.columns = ["date", "price"]
    df["date"] = pd.to_datetime(df["date"])
    df = df.set_index("date").sort_index()

    st.write("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞:", df.tail())

    try:
        scaled = scaler.transform(df[["price"]])
    except ValueError as e:
        st.error(f"Scaler –Ω–µ —Å–º–æ–≥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        st.stop()

    if scaled.min() < 0 or scaled.max() > 1:
        st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–±—É—á–∞–ª—Å—è scaler. "
                   "–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º.")

    X, y = create_dataset(scaled, WINDOW)
    if len(X) == 0:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–∫–Ω–∞ —Ä–∞–∑–º–µ—Ä–∞ 14 –¥–Ω–µ–π.")
        st.stop()

    X = X.reshape((X.shape[0], X.shape[1], 1))
    st.markdown("""
    –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –∏—Ö –∏–∑ –º–æ–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è  
    [AMIROLIMI/AMIR_OLIMI](https://github.com/AMIROLIMI/AMIR_OLIMI).
    """
    )
    if st.button("üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        y_pred = model.predict(X, verbose=0)
        y_pred_inv = scaler.inverse_transform(y_pred)
        y_true_inv = scaler.inverse_transform(y.reshape(-1, 1))

        rmse, mape, r2 = calc_metrics(y_true_inv, y_pred_inv)
        st.success(f"RMSE: {rmse:.2f} | MAPE: {mape:.3f} | R¬≤: {r2:.3f}")

        st.pyplot(plot_pred(y_true_inv, y_pred_inv))
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
