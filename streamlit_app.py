import streamlit as st
import pandas as pd
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score
import os
from datetime import datetime, timedelta

st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞", layout="wide")

st.title("üí∞ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç—ã—Ö —Å–ª–∏—Ç–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é LSTM")

st.markdown("""
–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –∑–æ–ª–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ LSTM.  
–û–±—É—á–µ–Ω–∞ –Ω–∞ 2861 —Ç–æ—á–∫–µ —Å –æ–∫–Ω–æ–º –≤ 14 –¥–Ω–µ–π.  
–ú–µ—Ç—Ä–∏–∫–∏:  
- **RMSE**: 47.33  
- **MAPE**: 0.007  
- **R¬≤**: 0.99  
–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è:  
- **RMSE**: 53.05  
- **MAPE**: 0.01  
- **R¬≤**: 0.90  

–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã.
""")

def load_and_preprocess_data(file=None):
    try:
        if file:
            df = pd.read_excel(file) if file.name.endswith(".xlsx") else pd.read_csv(file)
            df.columns = ['date', 'price']
            df['date'] = pd.to_datetime(df['date'])
            df = df.set_index('date').sort_index()
            return df
        else:
            # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –¥–∞—Ç—É
            dates = pd.date_range(end="2025-05-08", periods=14, freq="D")
            prices = np.linspace(2000, 2100, 14)  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã
            df = pd.DataFrame({"date": dates, "price": prices})
            df['date'] = pd.to_datetime(df['date'])
            df = df.set_index('date').sort_index()
            return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def create_dataset(data, window=14):
    X, y = [], []
    for i in range(len(data) - window):
        X.append(data[i:i+window])
        y.append(data[i+window])
    return np.array(X), np.array(y)

def load_lstm_model():
    try:
        model = Sequential([
            LSTM(32, input_shape=(14, 1), activation='relu'),
            Dense(1)
        ])
        model.compile(optimizer='adam', loss='mse')
        if os.path.exists("lstm_model.weights.h5"):
            model.load_weights("lstm_model.weights.h5")
        else:
            st.error("–§–∞–π–ª –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏ 'lstm_model.weights.h5' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        return None

def calculate_metrics(y_true, y_pred):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mape = mean_absolute_percentage_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    return rmse, mape, r2

def plot_predictions(y_true, y_pred, title="–ü—Ä–æ–≥–Ω–æ–∑ LSTM vs –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    fig, ax = plt.subplots(figsize=(12, 5))
    ax.plot(y_true, label='–†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', linewidth=2)
    ax.plot(y_pred, label='–ü—Ä–æ–≥–Ω–æ–∑ LSTM', linestyle='--')
    ax.set_title(title)
    ax.set_xlabel("–î–Ω–∏")
    ax.set_ylabel("–¶–µ–Ω–∞")
    ax.legend()
    ax.grid(True)
    return fig

def predict_single_date(model, scaler, df, target_date):
    try:
        last_date = df.index[-1]
        if target_date <= last_date:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return None
        days_ahead = (target_date - last_date).days
        if days_ahead > 365:
            st.error("–ü—Ä–æ–≥–Ω–æ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 365 –¥–Ω—è–º–∏ –≤ –±—É–¥—É—â–µ–µ.")
            return None
        last_14_days = df['price'].values[-14:].reshape(-1, 1)
        scaled_data = scaler.transform(last_14_days).flatten()
        predictions = []
        current_window = scaled_data.copy()
        for _ in range(days_ahead):
            X = current_window[-14:].reshape(1, 14, 1)
            pred_scaled = model.predict(X, verbose=0)
            predictions.append(pred_scaled[0, 0])
            current_window = np.append(current_window, pred_scaled[0, 0])
        pred_price = scaler.inverse_transform(np.array(predictions[-1]).reshape(-1, 1))[0, 0]
        return pred_price
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –¥–∞—Ç—É: {str(e)}")
        return None

model = load_lstm_model()
scaler = MinMaxScaler()

st.subheader("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel –∏–ª–∏ CSV —Å —Ü–µ–Ω–∞–º–∏", type=["xlsx", "csv"])

tab1, tab2 = st.tabs(["üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–∞—Ç—É"])

with tab1:
    if uploaded_file:
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            df = load_and_preprocess_data(uploaded_file)
        if df is not None:
            st.write("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:", df.head())
            scaled = scaler.fit_transform(df[['price']])
            X, y = create_dataset(scaled)
            X = X.reshape(X.shape[0], X.shape[1], 1)
            if model:
                st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º")
                if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", key="full_predict"):
                    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
                        y_pred = model.predict(X, verbose=0)
                        y_pred_inv = scaler.inverse_transform(y_pred)
                        y_true_inv = scaler.inverse_transform(y.reshape(-1, 1))
                        rmse, mape, r2 = calculate_metrics(y_true_inv, y_pred_inv)
                        st.success(f"üìå **–ú–µ—Ç—Ä–∏–∫–∏**: RMSE: {rmse:.2f} | MAPE: {mape:.3f} | R¬≤: {r2:.2f}")
                        fig = plot_predictions(y_true_inv, y_pred_inv)
                        st.pyplot(fig)
    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–∞–Ω–Ω—ã–º.")

with tab2:
    st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ–¥–Ω—É –¥–∞—Ç—É")
    default_df = load_and_preprocess_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if default_df is not None:
        max_date = default_df.index[-1] + timedelta(days=365)
        if uploaded_file:
            df = load_and_preprocess_data(uploaded_file)
            if df is not None:
                max_date = df.index[-1] + timedelta(days=365)
        else:
            df = default_df
        selected_date = st.date_input(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞",
            min_value=df.index[-1] + timedelta(days=1),
            max_value=max_date
        )
        if st.button("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å", key="single_predict"):
            with st.spinner("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
                scaler.fit_transform(df[['price']])
                pred_price = predict_single_date(model, scaler, df, pd.to_datetime(selected_date))
                if pred_price is not None:
                    st.success(f"üí∞ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞ –Ω–∞ {selected_date}: **{pred_price:.2f}**")
    else:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")

st.markdown("---")
st.markdown("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit | –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞")
