import streamlit as st
import pandas as pd
import numpy as np
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
import os

# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞", layout="wide")

st.title("üí∞ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ LSTM-–º–æ–¥–µ–ª–∏")

st.markdown("""
–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –∑–æ–ª–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å LSTM.  
–û–Ω–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ 2861 —Ç–æ—á–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–∫–Ω–æ –≤ 14 –¥–Ω–µ–π.  
–ú–µ—Ç—Ä–∏–∫–∏:
- **RMSE:** 47.33
- **MAPE:** 0.007
- **R¬≤:** 0.99  
–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è:
- **RMSE:** 53.05
- **MAPE:** 0.01
- **R¬≤:** 0.90
""")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏ (Excel)", type=["xlsx", "csv"])
if uploaded_file:
    df = pd.read_excel(uploaded_file) if uploaded_file.name.endswith(".xlsx") else pd.read_csv(uploaded_file)
    st.write("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", df.head())

    if st.button("üìà –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df.columns = ['date', 'price']
        df['date'] = pd.to_datetime(df['date'])
        df = df.set_index('date')

        scaler = MinMaxScaler()
        scaled = scaler.fit_transform(df[['price']])

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏
        def create_dataset(data, window=14):
            X, y = [], []
            for i in range(len(data) - window):
                X.append(data[i:i+window])
                y.append(data[i+window])
            return np.array(X), np.array(y)

        X, y = create_dataset(scaled)
        X = X.reshape(X.shape[0], X.shape[1], 1)

        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤
        model = Sequential([LSTM(32, input_shape=(14, 1)), Dense(1)])
        model.compile(optimizer='adam', loss='mse')
        model.load_weights("lstm_model.weights.h5")

        # –ü—Ä–æ–≥–Ω–æ–∑
        y_pred = model.predict(X)
        y_pred_inv = scaler.inverse_transform(y_pred)
        y_true_inv = scaler.inverse_transform(y.reshape(-1, 1))

        # –ú–µ—Ç—Ä–∏–∫–∏
        from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score
        rmse = np.sqrt(mean_squared_error(y_true_inv, y_pred_inv))
        mape = mean_absolute_percentage_error(y_true_inv, y_pred_inv)
        r2 = r2_score(y_true_inv, y_pred_inv)

        st.success(f"üìå RMSE: {rmse:.2f} | MAPE: {mape:.3f} | R¬≤: {r2:.2f}")

        # –ì—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(10, 4))
        ax.plot(y_true_inv, label='–ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
        ax.plot(y_pred_inv, label='–ü—Ä–æ–≥–Ω–æ–∑ (LSTM)', linestyle='--')
        ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏")
        ax.legend()
        st.pyplot(fig)
